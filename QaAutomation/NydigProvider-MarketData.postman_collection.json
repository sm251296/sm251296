{
	"info": {
		"_postman_id": "19bcb177-e013-4e0c-bb54-c7a7677f59df",
		"name": "NydigProvider-MarketData",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "GetTicker",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
							"    \"$ref\": \"#/definitions/getTicker\",\r",
							"    \"definitions\": {\r",
							"        \"Welcome3\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"symbol\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"currency\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"price\": {\r",
							"                    \"type\": \"number\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"currency\",\r",
							"                \"price\",\r",
							"                \"symbol\"\r",
							"            ],\r",
							"            \"title\": \"getTicker\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"const expectedResponseBody = {\r",
							"    \"symbol\": \"btc\",\r",
							"    \"currency\": \"usd\",\r",
							"    \"price\": 54175.71\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Market Ticker GET - 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Market Ticker GET\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body validation : Market Ticker GET\", function () {\r",
							"    var isExpectedBody = _.isEqual(_.omit(responseJson, ['price']), _.omit(expectedResponseBody, ['price']));\r",
							"    if(!isExpectedBody){\r",
							"        console.log(comparer.objDiff(responseJson,expectedResponseBody));\r",
							"    }\r",
							"    pm.expect(isExpectedBody).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{marketDataBearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{cpMarketDataBaseUrl}}/ticker/{{symbolBTC}}?toCurrency={{toCurrency}}",
					"host": [
						"{{cpMarketDataBaseUrl}}"
					],
					"path": [
						"ticker",
						"{{symbolBTC}}"
					],
					"query": [
						{
							"key": "toCurrency",
							"value": "{{toCurrency}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTicker_400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"const expectedResponseBody = {\r",
							"    \"code\": \"400\",\r",
							"    \"message\": \"toCurrency Invalid!\"\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Market Ticker GET - 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Market Ticker GET - 400\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time less than 10 sec : Market Ticker GET - 400\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body validation : Market Ticker GET - 400\", function () {\r",
							"    var isExpectedBody = _.isEqual(_.omit(responseJson, ['message']), _.omit(expectedResponseBody, ['message']));\r",
							"    if(!isExpectedBody){\r",
							"        console.log(comparer.objDiff(responseJson,expectedResponseBody));\r",
							"    }\r",
							"    pm.expect(isExpectedBody).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{marketDataBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpMarketDataBaseUrl}}/ticker/{{symbolBTC}}?toCurrency={{toCurrency}}1",
					"host": [
						"{{cpMarketDataBaseUrl}}"
					],
					"path": [
						"ticker",
						"{{symbolBTC}}"
					],
					"query": [
						{
							"key": "toCurrency",
							"value": "{{toCurrency}}1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTicker_401",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"const expectedResponseBody = {\r",
							"    \"code\": \"401\",\r",
							"    \"message\": \"Required request header 'x-tenant-id' for method parameter type String is not present\"\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Market Ticker GET - 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Market Ticker GET - 401\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body validation : Market Ticker GET - 401\", function () {\r",
							"    var isExpectedBody = _.isEqual(_.omit(responseJson, ['message']), _.omit(expectedResponseBody, ['message']));\r",
							"    if(!isExpectedBody){\r",
							"        console.log(comparer.objDiff(responseJson,expectedResponseBody));\r",
							"    }\r",
							"    pm.expect(isExpectedBody).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{marketDataBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpMarketDataBaseUrl}}/ticker/{{symbolBTC}}?toCurrency={{toCurrency}}",
					"host": [
						"{{cpMarketDataBaseUrl}}"
					],
					"path": [
						"ticker",
						"{{symbolBTC}}"
					],
					"query": [
						{
							"key": "toCurrency",
							"value": "{{toCurrency}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTicker_403",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"const expectedResponseBody = {\r",
							"    \"code\": 403,\r",
							"    \"message\": \"Forbidden\"\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Market Ticker GET - 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Market Ticker GET - 403\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body validation : Market Ticker GET - 403\", function () {\r",
							"    var isExpectedBody = _.isEqual(_.omit(responseJson, ['timestamp']), _.omit(expectedResponseBody, ['timestamp']));\r",
							"    if(!isExpectedBody){\r",
							"        console.log(comparer.objDiff(responseJson,expectedResponseBody));\r",
							"    }\r",
							"    pm.expect(isExpectedBody).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{invalidBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpMarketDataBaseUrl}}/ticker/{{symbolBTC}}?toCurrency={{toCurrency}}",
					"host": [
						"{{cpMarketDataBaseUrl}}"
					],
					"path": [
						"ticker",
						"{{symbolBTC}}"
					],
					"query": [
						{
							"key": "toCurrency",
							"value": "{{toCurrency}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTicker_404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"const expectedResponseBody = {\r",
							"    \"code\": \"404\",\r",
							"    \"message\": \"The specified resource was not found\"\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Market Ticker GET - 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Market Ticker GET - 404\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body validation : Market Ticker GET - 404\", function () {\r",
							"    var isExpectedBody = _.isEqual(_.omit(responseJson, ['message']), _.omit(expectedResponseBody, ['message']));\r",
							"    if(!isExpectedBody){\r",
							"        console.log(comparer.objDiff(responseJson,expectedResponseBody));\r",
							"    }\r",
							"    pm.expect(isExpectedBody).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}1",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{marketDataBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpMarketDataBaseUrl}}/ticker/{{symbolBTC}}?toCurrency={{toCurrency}}",
					"host": [
						"{{cpMarketDataBaseUrl}}"
					],
					"path": [
						"ticker",
						"{{symbolBTC}}"
					],
					"query": [
						{
							"key": "toCurrency",
							"value": "{{toCurrency}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTickerHistory",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
							"    \"$ref\": \"#/definitions/Welcome9\",\r",
							"    \"definitions\": {\r",
							"        \"Welcome9\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"symbol\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"currency\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"data\": {\r",
							"                    \"type\": \"array\",\r",
							"                    \"items\": {\r",
							"                        \"$ref\": \"#/definitions/Datum\"\r",
							"                    }\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"currency\",\r",
							"                \"data\",\r",
							"                \"symbol\"\r",
							"            ],\r",
							"            \"title\": \"Welcome9\"\r",
							"        },\r",
							"        \"Datum\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"price\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"timestamp\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"price\",\r",
							"                \"timestamp\"\r",
							"            ],\r",
							"            \"title\": \"Datum\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"const expectedResponseBody = {\r",
							"    \"symbol\": \"btc\",\r",
							"    \"currency\": \"usd\",\r",
							"    \"data\": []\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Market Ticker History GET - 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Market Ticker History GET - 200\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body validation : Market Ticker History GET - 400\", function () {\r",
							"    var isExpectedBody = _.isEqual(_.omit(responseJson, ['data']), _.omit(expectedResponseBody, ['data']));\r",
							"    if(!isExpectedBody){\r",
							"        console.log(comparer.objDiff(responseJson,expectedResponseBody));\r",
							"    }\r",
							"    pm.expect(isExpectedBody).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{marketDataBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpMarketDataBaseUrl}}/ticker/{{symbolBTC}}/history?frequency={{frequency_oneMinute}}&lookback={{lookback_day}}&toCurrency={{toCurrency}}",
					"host": [
						"{{cpMarketDataBaseUrl}}"
					],
					"path": [
						"ticker",
						"{{symbolBTC}}",
						"history"
					],
					"query": [
						{
							"key": "frequency",
							"value": "{{frequency_oneMinute}}"
						},
						{
							"key": "lookback",
							"value": "{{lookback_day}}"
						},
						{
							"key": "toCurrency",
							"value": "{{toCurrency}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTickerHistory_400",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"const expectedResponseBody = {\r",
							"    \"code\": \"400\",\r",
							"    \"message\": \"toCurrency Invalid!\"\r",
							"}\r",
							"\r",
							"pm.test(\"Verify Status Code: Market Ticker History GET - 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Market Ticker History GET - 400\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body validation : Market Ticker History GET - 400\", function () {\r",
							"    var isExpectedBody = _.isEqual(_.omit(responseJson, ['message']), _.omit(expectedResponseBody, ['message']));\r",
							"    if(!isExpectedBody){\r",
							"        console.log(comparer.objDiff(responseJson,expectedResponseBody));\r",
							"    }\r",
							"    pm.expect(isExpectedBody).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{marketDataBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpMarketDataBaseUrl}}/ticker/{{symbolBTC}}/history?frequency={{frequency_oneMinute}}&lookback={{lookback_day}}&toCurrency={{toCurrency}}1",
					"host": [
						"{{cpMarketDataBaseUrl}}"
					],
					"path": [
						"ticker",
						"{{symbolBTC}}",
						"history"
					],
					"query": [
						{
							"key": "frequency",
							"value": "{{frequency_oneMinute}}"
						},
						{
							"key": "lookback",
							"value": "{{lookback_day}}"
						},
						{
							"key": "toCurrency",
							"value": "{{toCurrency}}1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTickerHistory_401",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"const expectedResponseBody = {\r",
							"    \"code\": \"401\",\r",
							"    \"message\": \"Required request header 'x-tenant-id' for method parameter type String is not present\"\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Market Ticker History GET - 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Market Ticker History GET - 401 \", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body validation : Market Ticker History GET - 401\", function () {\r",
							"    var isExpectedBody = _.isEqual(_.omit(responseJson, ['message']), _.omit(expectedResponseBody, ['message']));\r",
							"    if(!isExpectedBody){\r",
							"        console.log(comparer.objDiff(responseJson,expectedResponseBody));\r",
							"    }\r",
							"    pm.expect(isExpectedBody).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{marketDataBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpMarketDataBaseUrl}}/ticker/{{symbolBTC}}/history?frequency={{frequency_oneMinute}}&lookback={{lookback_day}}&toCurrency={{toCurrency}}",
					"host": [
						"{{cpMarketDataBaseUrl}}"
					],
					"path": [
						"ticker",
						"{{symbolBTC}}",
						"history"
					],
					"query": [
						{
							"key": "frequency",
							"value": "{{frequency_oneMinute}}"
						},
						{
							"key": "lookback",
							"value": "{{lookback_day}}"
						},
						{
							"key": "toCurrency",
							"value": "{{toCurrency}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTickerHistory_403",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"const expectedResponseBody = {\r",
							"    \"code\": 403,\r",
							"    \"message\": \"Forbidden\"\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Market Ticker History GET - 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Market Ticker History GET - 403\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body validation : Market Ticker History GET - 403\", function () {\r",
							"    var isExpectedBody = _.isEqual(_.omit(responseJson, ['timestamp']), _.omit(expectedResponseBody, ['timestamp']));\r",
							"    if(!isExpectedBody){\r",
							"        console.log(comparer.objDiff(responseJson,expectedResponseBody));\r",
							"    }\r",
							"    pm.expect(isExpectedBody).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{invalidBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpMarketDataBaseUrl}}/ticker/{{symbolBTC}}/history?frequency={{frequency_oneMinute}}&lookback={{lookback_day}}&toCurrency={{toCurrency}}",
					"host": [
						"{{cpMarketDataBaseUrl}}"
					],
					"path": [
						"ticker",
						"{{symbolBTC}}",
						"history"
					],
					"query": [
						{
							"key": "frequency",
							"value": "{{frequency_oneMinute}}"
						},
						{
							"key": "lookback",
							"value": "{{lookback_day}}"
						},
						{
							"key": "toCurrency",
							"value": "{{toCurrency}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTickerHistory_404",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"const expectedResponseBody = {\r",
							"    \"code\": \"404\",\r",
							"    \"message\": \"The specified resource was not found\"\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Market Ticker History GET - 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Market Ticker History GET - 404\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response Body validation : Market Ticker History GET - 404\", function () {\r",
							"    var isExpectedBody = _.isEqual(_.omit(responseJson, ['message']), _.omit(expectedResponseBody, ['message']));\r",
							"    if(!isExpectedBody){\r",
							"        console.log(comparer.objDiff(responseJson,expectedResponseBody));\r",
							"    }\r",
							"    pm.expect(isExpectedBody).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}p",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{marketDataBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpMarketDataBaseUrl}}/ticker/{{symbolBTC}}/history?frequency={{frequency_oneMinute}}&lookback={{lookback_day}}&toCurrency={{toCurrency}}",
					"host": [
						"{{cpMarketDataBaseUrl}}"
					],
					"path": [
						"ticker",
						"{{symbolBTC}}",
						"history"
					],
					"query": [
						{
							"key": "frequency",
							"value": "{{frequency_oneMinute}}"
						},
						{
							"key": "lookback",
							"value": "{{lookback_day}}"
						},
						{
							"key": "toCurrency",
							"value": "{{toCurrency}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const authBody = 'client_id=7168155c594e45fbabf9e8fe1560aae6&client_secret=4ce94149b9244c59811953477d4db499&grant_type=client_credentials'",
					"",
					"const tokenPostRequest = {",
					"    url: \"https://ncrdev-dev.apigee.net/security/access-key-authentication/oauth2/token\",",
					"    method: 'POST',",
					"    header: { 'Content-type': 'application/x-www-form-urlencoded' },",
					"    body: {",
					"        mode: 'raw',",
					"        raw: authBody",
					"    }",
					"}; ",
					"",
					"pm.sendRequest(tokenPostRequest, function (err, res) {",
					"    if (err) {",
					"        console.log(err);",
					"    }",
					"    else {",
					"        var jsonResponseData = res.json();",
					"        pm.environment.set(\"marketDataBearerToken\", jsonResponseData.access_token);",
					"    }",
					"});",
					"",
					"comparer = {",
					"objDiff : function (obj1, obj2) {",
					"    const diff = Object.keys(obj1).reduce((result, key) => {",
					"        if (!obj2.hasOwnProperty(key)) {",
					"            result.push(key);",
					"            } else if (_.isEqual(obj1[key",
					"            ], obj2[key",
					"            ])) {",
					"            const resultKeyIndex = result.indexOf(key);",
					"            result.splice(resultKeyIndex,",
					"                1);",
					"            }",
					"        return result;",
					"        }, Object.keys(obj2));",
					"",
					"    return diff;",
					"    }",
					"};"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"let possibleErrorKeywords = pm.globals.get(\"errorKeywords\").split(\"~\");",
					"",
					"pm.test(\"Verify stack trace\", () => {",
					"    for (var i = 0; i < possibleErrorKeywords.length; i++) {",
					"        pm.expect(pm.response.text()).to.not.include(possibleErrorKeywords[i]);  ",
					"    }      ",
					"});"
				]
			}
		}
	]
}