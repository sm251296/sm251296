{
	"info": {
		"_postman_id": "8f2b540f-6137-43aa-a8f6-1442fd4c9c8c",
		"name": "NydigProvider-Orders",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "PostOrders_Buy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
							"    \"$ref\": \"#/definitions/Welcome5\",\r",
							"    \"definitions\": {\r",
							"        \"Welcome5\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"accountId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"created\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                },\r",
							"                \"expiration\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                },\r",
							"                \"status\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"symbol\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"side\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"price\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"quantity\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"receipt\": {\r",
							"                    \"$ref\": \"#/definitions/Receipt\"\r",
							"                },\r",
							"                \"requestedAt\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"accountId\",\r",
							"                \"created\",\r",
							"                \"expiration\",\r",
							"                \"id\",\r",
							"                \"price\",\r",
							"                \"quantity\",\r",
							"                \"receipt\",\r",
							"                \"requestedAt\",\r",
							"                \"side\",\r",
							"                \"status\",\r",
							"                \"symbol\",\r",
							"                \"userId\"\r",
							"            ],\r",
							"            \"title\": \"Welcome5\"\r",
							"        },\r",
							"        \"Receipt\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"subtotal\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"fee\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"total\": {\r",
							"                    \"type\": \"number\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"fee\",\r",
							"                \"subtotal\",\r",
							"                \"total\"\r",
							"            ],\r",
							"            \"title\": \"Receipt\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders POST - 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"orderIdBuyToExecute\", responseJson.id);\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders POST - 201\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"accountId\": \"{{ordersAccountId}}\",\r\n  \"userId\": \"cu-01fj1xem8vja26pc7rk2te8qd7\",\r\n  \"side\": \"buy\",\r\n  \"symbol\": \"btc\",\r\n  \"quantity\": 0.1\r\n}"
				},
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostOrders_Sell",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
							"    \"$ref\": \"#/definitions/Welcome5\",\r",
							"    \"definitions\": {\r",
							"        \"Welcome5\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"accountId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"created\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                },\r",
							"                \"expiration\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                },\r",
							"                \"status\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"symbol\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"side\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"price\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"quantity\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"receipt\": {\r",
							"                    \"$ref\": \"#/definitions/Receipt\"\r",
							"                },\r",
							"                \"requestedAt\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"accountId\",\r",
							"                \"created\",\r",
							"                \"expiration\",\r",
							"                \"id\",\r",
							"                \"price\",\r",
							"                \"quantity\",\r",
							"                \"receipt\",\r",
							"                \"requestedAt\",\r",
							"                \"side\",\r",
							"                \"status\",\r",
							"                \"symbol\",\r",
							"                \"userId\"\r",
							"            ],\r",
							"            \"title\": \"Welcome5\"\r",
							"        },\r",
							"        \"Receipt\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"subtotal\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"fee\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"total\": {\r",
							"                    \"type\": \"number\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"fee\",\r",
							"                \"subtotal\",\r",
							"                \"total\"\r",
							"            ],\r",
							"            \"title\": \"Receipt\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders POST - 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"pm.environment.set(\"orderIdSellToExecute\", responseJson.id);\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders POST - 201\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"accountId\": \"{{ordersAccountId}}\",\r\n  \"userId\": \"cu-01fj1xem8vja26pc7rk2te8qd7\",\r\n  \"side\": \"sell\",\r\n  \"symbol\": \"btc\",\r\n  \"quantity\": 0.01\r\n}"
				},
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostOrders_SellZeroQuantity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders POST - 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders POST 0.0 QUANTITY - 400\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"accountId\": \"{{ordersAccountId}}\",\r\n  \"userId\": \"cu-01fj1xem8vja26pc7rk2te8qd7\",\r\n  \"side\": \"sell\",\r\n  \"symbol\": \"btc\",\r\n  \"quantity\": 0.0\r\n}"
				},
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostOrders_BuyZeroQuantity",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders POST - 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders POST 0.0 QUANTITY - 400\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"accountId\": \"{{ordersAccountId}}\",\r\n  \"userId\": \"cu-01fj1xem8vja26pc7rk2te8qd7\",\r\n  \"side\": \"buy\",\r\n  \"symbol\": \"btc\",\r\n  \"quantity\": 0.0\r\n}"
				},
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostOrders_400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders POST - 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders POST - 400\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"accountId\": \"{{ordersAccountId}}\",\r\n  \"userId\": \"cu-01fj1xem8vja26pc7rk2te8qd7\",\r\n  \"side\": \"buy\",\r\n  \"symbol\": \"usd\",\r\n  \"quantity\": 0.1\r\n}"
				},
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostOrders_401",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders POST - 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders POST - 401\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"accountId\": \"{{ordersAccountId}}\",\r\n    \"userId\": \"6a8e01a8-37f0-40e7-bb4e-2b47f1b2745e\",\r\n    \"side\": \"buy\",\r\n    \"symbol\": \"btc\",\r\n    \"quantity\": 1000\r\n}"
				},
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostOrders_403",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
							"    \"$ref\": \"#/definitions/Welcome2\",\r",
							"    \"definitions\": {\r",
							"        \"Welcome2\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"timestamp\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                },\r",
							"                \"status\": {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                \"error\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"path\": {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"error\",\r",
							"                \"path\",\r",
							"                \"status\",\r",
							"                \"timestamp\"\r",
							"            ],\r",
							"            \"title\": \"Welcome2\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders POST - 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders POST - 403\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{invalidBearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"accountId\": \"{{ordersAccountId}}\",\r\n    \"userId\": \"6a8e01a8-37f0-40e7-bb4e-2b47f1b2745e\",\r\n    \"side\": \"buy\",\r\n    \"symbol\": \"btc\",\r\n    \"quantity\": 1000\r\n}"
				},
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostOrders_404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders POST - 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders POST - 404\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}1",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"accountId\": \"378600619308\",\r\n    \"userId\": \"cu-01fj1xem8vja26pc7rk2te8qd7\",\r\n    \"side\": \"buy\",\r\n    \"symbol\": \"btc\",\r\n    \"quantity\": 0.1\r\n}"
				},
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetOrders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
							"    \"$ref\": \"#/definitions/Welcome1\",\r",
							"    \"definitions\": {\r",
							"        \"Welcome1\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"accountId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"created\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                },\r",
							"                \"status\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"symbol\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"side\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"price\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"quantity\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"receipt\": {\r",
							"                    \"$ref\": \"#/definitions/Receipt\"\r",
							"                },\r",
							"                \"requestedAt\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                },\r",
							"                \"lastUpdated\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"accountId\",\r",
							"                \"created\",\r",
							"                \"id\",\r",
							"                \"lastUpdated\",\r",
							"                \"price\",\r",
							"                \"quantity\",\r",
							"                \"receipt\",\r",
							"                \"requestedAt\",\r",
							"                \"side\",\r",
							"                \"status\",\r",
							"                \"symbol\",\r",
							"                \"userId\"\r",
							"            ],\r",
							"            \"title\": \"Welcome1\"\r",
							"        },\r",
							"        \"Receipt\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"subtotal\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"fee\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"total\": {\r",
							"                    \"type\": \"number\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"fee\",\r",
							"                \"subtotal\",\r",
							"                \"total\"\r",
							"            ],\r",
							"            \"title\": \"Receipt\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders GET - 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders GET - 200\", function () {\r",
							"    responseJson.results.forEach(function(item) {\r",
							"        var result = tv4.validateResult(item, schema);\r",
							"            if(!(result.valid)){\r",
							"                console.log(result);\r",
							"            }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders?accountId={{ordersAccountId}}&fromDate={{fromDate}}&toDate={{toDate}}&status=open",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "accountId",
							"value": "{{ordersAccountId}}"
						},
						{
							"key": "fromDate",
							"value": "{{fromDate}}"
						},
						{
							"key": "toDate",
							"value": "{{toDate}}"
						},
						{
							"key": "status",
							"value": "open"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetOrders_400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders GET - 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders GET - 400\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders?accountId={{ordersAccountId}}&fromDate={{fromDate}}&toDate={{toDate}}&status=open1",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "accountId",
							"value": "{{ordersAccountId}}"
						},
						{
							"key": "fromDate",
							"value": "{{fromDate}}"
						},
						{
							"key": "toDate",
							"value": "{{toDate}}"
						},
						{
							"key": "status",
							"value": "open1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetOrders_401",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders GET - 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders GET - 401\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders?accountId={{ordersAccountId}}&fromDate={{fromDate}}&toDate={{toDate}}&status=open",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "accountId",
							"value": "{{ordersAccountId}}"
						},
						{
							"key": "fromDate",
							"value": "{{fromDate}}"
						},
						{
							"key": "toDate",
							"value": "{{toDate}}"
						},
						{
							"key": "status",
							"value": "open"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetOrders_403",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
							"    \"$ref\": \"#/definitions/Welcome2\",\r",
							"    \"definitions\": {\r",
							"        \"Welcome2\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"timestamp\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                },\r",
							"                \"status\": {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                \"error\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"path\": {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"error\",\r",
							"                \"path\",\r",
							"                \"status\",\r",
							"                \"timestamp\"\r",
							"            ],\r",
							"            \"title\": \"Welcome2\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders GET - 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders GET - 403\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{invalidBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders?accountId={{ordersAccountId}}&fromDate={{fromDate}}&toDate={{toDate}}&status=open",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "accountId",
							"value": "{{ordersAccountId}}"
						},
						{
							"key": "fromDate",
							"value": "{{fromDate}}"
						},
						{
							"key": "toDate",
							"value": "{{toDate}}"
						},
						{
							"key": "status",
							"value": "open"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetOrders_404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders GET - 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders GET - 404\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders?accountId={{invalidAccountId}}&fromDate={{fromDate}}&toDate={{toDate}}&status=open",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"key": "accountId",
							"value": "{{invalidAccountId}}"
						},
						{
							"key": "fromDate",
							"value": "{{fromDate}}"
						},
						{
							"key": "toDate",
							"value": "{{toDate}}"
						},
						{
							"key": "status",
							"value": "open"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GetOrder",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
							"    \"$ref\": \"#/definitions/Welcome10\",\r",
							"    \"definitions\": {\r",
							"        \"Welcome10\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"accountId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"created\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                },\r",
							"                \"status\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"symbol\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"side\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"quantity\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"requestedAt\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                },\r",
							"                \"lastUpdated\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"accountId\",\r",
							"                \"created\",\r",
							"                \"id\",\r",
							"                \"lastUpdated\",\r",
							"                \"quantity\",\r",
							"                \"requestedAt\",\r",
							"                \"side\",\r",
							"                \"status\",\r",
							"                \"symbol\",\r",
							"                \"userId\"\r",
							"            ],\r",
							"            \"title\": \"Welcome10\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Order GET - 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Order GET - 200\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders/{{orderId}}",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetOrder_400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Order GET - 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Order GET - 400\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders/{{orderId}}1",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders",
						"{{orderId}}1"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetOrder_401",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Order GET - 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Order GET - 401\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders/{{orderId}}",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetOrder_403",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
							"    \"$ref\": \"#/definitions/Welcome2\",\r",
							"    \"definitions\": {\r",
							"        \"Welcome2\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"timestamp\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                },\r",
							"                \"status\": {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                \"error\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"path\": {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"error\",\r",
							"                \"path\",\r",
							"                \"status\",\r",
							"                \"timestamp\"\r",
							"            ],\r",
							"            \"title\": \"Welcome2\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Order GET - 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Order GET - 403\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{invalidBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders/{{orderId}}",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders",
						"{{orderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetOrder_404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Order GET - 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Order GET - 404\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders/{{invalidOrderId}}",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders",
						"{{invalidOrderId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostOrdersBuyExecute",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
							"    \"$ref\": \"#/definitions/Welcome4\",\r",
							"    \"definitions\": {\r",
							"        \"Welcome4\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"accountId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"created\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                },\r",
							"                \"status\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"symbol\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"side\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"price\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"quantity\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"receipt\": {\r",
							"                    \"$ref\": \"#/definitions/Receipt\"\r",
							"                },\r",
							"                \"requestedAt\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                },\r",
							"                \"lastUpdated\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"accountId\",\r",
							"                \"created\",\r",
							"                \"id\",\r",
							"                \"lastUpdated\",\r",
							"                \"price\",\r",
							"                \"quantity\",\r",
							"                \"receipt\",\r",
							"                \"requestedAt\",\r",
							"                \"side\",\r",
							"                \"status\",\r",
							"                \"symbol\",\r",
							"                \"userId\"\r",
							"            ],\r",
							"            \"title\": \"Welcome4\"\r",
							"        },\r",
							"        \"Receipt\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"subtotal\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"fee\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"total\": {\r",
							"                    \"type\": \"number\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"fee\",\r",
							"                \"subtotal\",\r",
							"                \"total\"\r",
							"            ],\r",
							"            \"title\": \"Receipt\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders Execute POST - 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders Execute POST - 409\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"oq-01fk65z0twc81gwdwk0c051wyx\",\r\n    \"accountId\": \"300000619308\",\r\n    \"userId\": \"cu-01fj1xem8vja26pc7rk2te8qd7\",\r\n    \"created\": \"2021-10-29T14:06:24Z\",\r\n    \"expiration\": \"2021-10-29T14:06:54Z\",\r\n    \"status\": \"quote\",\r\n    \"symbol\": \"btc\",\r\n    \"side\": \"buy\",\r\n    \"price\": 61484.51,\r\n    \"quantity\": 0.10000000,\r\n    \"receipt\": {\r\n        \"subtotal\": 6148.45,\r\n        \"fee\": 122.97,\r\n        \"total\": 6271.42\r\n    },\r\n    \"requestedAt\": \"2021-10-29T14:06:24Z\"\r\n}"
				},
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders/{{orderIdBuyToExecute}}/execute",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders",
						"{{orderIdBuyToExecute}}",
						"execute"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostOrdersSellExecute",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
							"    \"$ref\": \"#/definitions/Welcome4\",\r",
							"    \"definitions\": {\r",
							"        \"Welcome4\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"id\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"accountId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"userId\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"created\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                },\r",
							"                \"status\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"symbol\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"side\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"price\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"quantity\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"receipt\": {\r",
							"                    \"$ref\": \"#/definitions/Receipt\"\r",
							"                },\r",
							"                \"requestedAt\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                },\r",
							"                \"lastUpdated\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"accountId\",\r",
							"                \"created\",\r",
							"                \"id\",\r",
							"                \"lastUpdated\",\r",
							"                \"price\",\r",
							"                \"quantity\",\r",
							"                \"receipt\",\r",
							"                \"requestedAt\",\r",
							"                \"side\",\r",
							"                \"status\",\r",
							"                \"symbol\",\r",
							"                \"userId\"\r",
							"            ],\r",
							"            \"title\": \"Welcome4\"\r",
							"        },\r",
							"        \"Receipt\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"subtotal\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"fee\": {\r",
							"                    \"type\": \"number\"\r",
							"                },\r",
							"                \"total\": {\r",
							"                    \"type\": \"number\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"fee\",\r",
							"                \"subtotal\",\r",
							"                \"total\"\r",
							"            ],\r",
							"            \"title\": \"Receipt\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders Execute POST - 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders Execute POST - 409\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"oq-01fk65z0twc81gwdwk0c051wyx\",\r\n    \"accountId\": \"300000619308\",\r\n    \"userId\": \"cu-01fj1xem8vja26pc7rk2te8qd7\",\r\n    \"created\": \"2021-10-29T14:06:24Z\",\r\n    \"expiration\": \"2021-10-29T14:06:54Z\",\r\n    \"status\": \"quote\",\r\n    \"symbol\": \"btc\",\r\n    \"side\": \"buy\",\r\n    \"price\": 61484.51,\r\n    \"quantity\": 0.10000000,\r\n    \"receipt\": {\r\n        \"subtotal\": 6148.45,\r\n        \"fee\": 122.97,\r\n        \"total\": 6271.42\r\n    },\r\n    \"requestedAt\": \"2021-10-29T14:06:24Z\"\r\n}"
				},
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders/{{orderIdSellToExecute}}/execute",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders",
						"{{orderIdSellToExecute}}",
						"execute"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostOrdersExecute_400",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders Execute POST - 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders Execute POST - 400\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"oq-01fk65z0twc81gwdwk0c051wyx\",\r\n    \"accountId\": \"300000619308\",\r\n    \"userId\": \"786cu-01fj1xem8vja26pc7rk2te8qd7\",\r\n    \"created\": \"2021-10-29T14:06:24Z\",\r\n    \"expiration\": \"2021-10-29T14:06:54Z\",\r\n    \"status\": \"quote\",\r\n    \"symbol\": \"btc\",\r\n    \"side\": \"buy\",\r\n    \"price\": 61484.51,\r\n    \"quantity\": 100.10000000,\r\n    \"receipt\": {\r\n        \"subtotal\": 6148.45,\r\n        \"fee\": 122.97,\r\n        \"total\": 6271.42\r\n    },\r\n    \"requestedAt\": \"2021-10-29T14:06:24Z\"\r\n}"
				},
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders/{{orderIdBuyToExecute}}/execute",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders",
						"{{orderIdBuyToExecute}}",
						"execute"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostOrdersExecute_401",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders Execute POST - 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders Execute POST - 401\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"oq-01fk65z0twc81gwdwk0c051wyx\",\r\n    \"accountId\": \"300000619308\",\r\n    \"userId\": \"cu-01fj1xem8vja26pc7rk2te8qd7\",\r\n    \"created\": \"2021-10-29T14:06:24Z\",\r\n    \"expiration\": \"2021-10-29T14:06:54Z\",\r\n    \"status\": \"quote\",\r\n    \"symbol\": \"btc\",\r\n    \"side\": \"buy\",\r\n    \"price\": 61484.51,\r\n    \"quantity\": 0.10000000,\r\n    \"receipt\": {\r\n        \"subtotal\": 6148.45,\r\n        \"fee\": 122.97,\r\n        \"total\": 6271.42\r\n    },\r\n    \"requestedAt\": \"2021-10-29T14:06:24Z\"\r\n}"
				},
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders/{{orderIdBuyToExecute}}/execute",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders",
						"{{orderIdBuyToExecute}}",
						"execute"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostOrdersExecute_403",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"    \"$schema\": \"http://json-schema.org/draft-06/schema#\",\r",
							"    \"$ref\": \"#/definitions/Welcome2\",\r",
							"    \"definitions\": {\r",
							"        \"Welcome2\": {\r",
							"            \"type\": \"object\",\r",
							"            \"additionalProperties\": false,\r",
							"            \"properties\": {\r",
							"                \"timestamp\": {\r",
							"                    \"type\": \"string\",\r",
							"                    \"format\": \"date-time\"\r",
							"                },\r",
							"                \"status\": {\r",
							"                    \"type\": \"integer\"\r",
							"                },\r",
							"                \"error\": {\r",
							"                    \"type\": \"string\"\r",
							"                },\r",
							"                \"path\": {\r",
							"                    \"type\": \"string\"\r",
							"                }\r",
							"            },\r",
							"            \"required\": [\r",
							"                \"error\",\r",
							"                \"path\",\r",
							"                \"status\",\r",
							"                \"timestamp\"\r",
							"            ],\r",
							"            \"title\": \"Welcome2\"\r",
							"        }\r",
							"    }\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders Execute POST - 403\", function () {\r",
							"    pm.response.to.have.status(403);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders Execute POST - 403\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{invalidBearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"accountId\": \"6a8e01a8-37f0-40e7-bb4e-2b47f1b2745e\",\r\n    \"userId\": \"673c71f3-0a7a-4f9d-9f0a-c076994f8120\",\r\n    \"userInfo\": {\r\n        \"line1\": \"123 Main St\",\r\n        \"city\": \"New York\",\r\n        \"stateProvinceRegion\": \"NY\",\r\n        \"zipCode\": \"10092\",\r\n        \"country\": \"US\",\r\n        \"email\": \"jon-odin+35@example.com\",\r\n        \"phone\": \"+15559876543\"\r\n    }\r\n}"
				},
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders/{{orderIdBuyToExecute}}/execute",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders",
						"{{orderIdBuyToExecute}}",
						"execute"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostOrdersExecute_404",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders Execute POST - 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders Execute POST - 404\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"oq-01fk65z0twc81gwdwk0c051wyx\",\r\n    \"accountId\": \"378600619308\",\r\n    \"userId\": \"cu-01fj1xem8vja26pc7rk2te8qd7\",\r\n    \"created\": \"2021-10-29T14:06:24Z\",\r\n    \"expiration\": \"2021-10-29T14:06:54Z\",\r\n    \"status\": \"quote\",\r\n    \"symbol\": \"btc\",\r\n    \"side\": \"buy\",\r\n    \"price\": 61484.51,\r\n    \"quantity\": 0.10000000,\r\n    \"receipt\": {\r\n        \"subtotal\": 6148.45,\r\n        \"fee\": 122.97,\r\n        \"total\": 6271.42\r\n    },\r\n    \"requestedAt\": \"2021-10-29T14:06:24Z\"\r\n}"
				},
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders/{{orderIdBuyToExecute}}/execute",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders",
						"{{orderIdBuyToExecute}}",
						"execute"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostOrdersBuyExecute_409",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders Execute POST - 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders Execute POST - 409\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"oq-01fk65z0twc81gwdwk0c051wyx\",\r\n    \"accountId\": \"300000619308\",\r\n    \"userId\": \"cu-01fj1xem8vja26pc7rk2te8qd7\",\r\n    \"created\": \"2021-10-29T14:06:24Z\",\r\n    \"expiration\": \"2021-10-29T14:06:54Z\",\r\n    \"status\": \"quote\",\r\n    \"symbol\": \"btc\",\r\n    \"side\": \"buy\",\r\n    \"price\": 61484.51,\r\n    \"quantity\": 0.10000000,\r\n    \"receipt\": {\r\n        \"subtotal\": 6148.45,\r\n        \"fee\": 122.97,\r\n        \"total\": 6271.42\r\n    },\r\n    \"requestedAt\": \"2021-10-29T14:06:24Z\"\r\n}"
				},
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders/{{orderIdBuyToExecute}}/execute",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders",
						"{{orderIdBuyToExecute}}",
						"execute"
					]
				}
			},
			"response": []
		},
		{
			"name": "PostOrdersSellExecute_409",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const schema = {\r",
							"  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"code\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"message\": {\r",
							"      \"type\": \"string\"\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"code\",\r",
							"    \"message\"\r",
							"  ]\r",
							"};\r",
							"\r",
							"pm.test(\"Verify Status Code: Orders Execute POST - 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"const responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"Response Schema validation: Orders Execute POST - 409\", function () {\r",
							"    var result = tv4.validateResult(responseJson, schema);\r",
							"    if(!(result.valid)){\r",
							"        console.log(result);\r",
							"    }\r",
							"    pm.expect(result.valid).to.be.true;\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 10 seconds\", () => {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(10000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					},
					{
						"key": "x-tenant-id",
						"value": "{{x-tenant-id}}",
						"type": "text"
					},
					{
						"key": "Authorization",
						"value": "Bearer {{ordersBearerToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": \"oq-01fk65z0twc81gwdwk0c051wyx\",\r\n    \"accountId\": \"300000619308\",\r\n    \"userId\": \"cu-01fj1xem8vja26pc7rk2te8qd7\",\r\n    \"created\": \"2021-10-29T14:06:24Z\",\r\n    \"expiration\": \"2021-10-29T14:06:54Z\",\r\n    \"status\": \"quote\",\r\n    \"symbol\": \"btc\",\r\n    \"side\": \"buy\",\r\n    \"price\": 61484.51,\r\n    \"quantity\": 0.10000000,\r\n    \"receipt\": {\r\n        \"subtotal\": 6148.45,\r\n        \"fee\": 122.97,\r\n        \"total\": 6271.42\r\n    },\r\n    \"requestedAt\": \"2021-10-29T14:06:24Z\"\r\n}"
				},
				"url": {
					"raw": "{{cpOrdersBaseUrl}}/orders/{{orderIdSellToExecute}}/execute",
					"host": [
						"{{cpOrdersBaseUrl}}"
					],
					"path": [
						"orders",
						"{{orderIdSellToExecute}}",
						"execute"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const authBody = 'client_id=7168155c594e45fbabf9e8fe1560aae6&client_secret=4ce94149b9244c59811953477d4db499&grant_type=client_credentials'",
					"",
					"const tokenPostRequest = {",
					"    url: \"https://ncrdev-dev.apigee.net/security/access-key-authentication/oauth2/token\",",
					"    method: 'POST',",
					"    header: { 'Content-type': 'application/x-www-form-urlencoded' },",
					"    body: {",
					"        mode: 'raw',",
					"        raw: authBody",
					"    }",
					"}; ",
					"",
					"pm.sendRequest(tokenPostRequest, function (err, res) {",
					"    if (err) {",
					"        console.log(err);",
					"    }",
					"    else {",
					"        var jsonResponseData = res.json();",
					"        pm.environment.set(\"ordersBearerToken\", jsonResponseData.access_token);",
					"    }",
					"});",
					"",
					"var moment = require('moment');",
					"pm.environment.set('fromDate', moment().subtract(7, \"days\"));",
					"pm.environment.set('toDate', moment().add(5, \"minutes\"));"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const possibleErrorKeywords = pm.globals.get( \"errorKeywords\").split(\"~\");",
					"",
					"pm.test(\"Verify stack trace\", () => {",
					"    for (var i = 0; i < possibleErrorKeywords.length; i++) {",
					"        pm.expect(pm.response.text()).to.not.include(possibleErrorKeywords[i]);  ",
					"    }      ",
					"});"
				]
			}
		}
	]
}